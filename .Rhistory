ggdag::dag_adjustment_sets(g)
g %>% adjust_for('z')
library(ggdag)
g %>% adjust_for('z')
g %>% adjust_for('z') %>% ggdag_adjust()
g %>% adjust_for('z') %>% ggdag_adjustment_set()
test_that("User: NULL | Solution: No adjustment", {
expect_equal(grader(NULL, testDag1), 'correct')
})
library(testthat)
test_that("User: NULL | Solution: No adjustment", {
expect_equal(grader(NULL, testDag1), 'correct')
})
testDag1 <- dagitty::as.dagitty(
"dag {
X [exposure]
Y [outcome]
Z
X -> Z
X -> Y
}"
)
test_that("User: NULL | Solution: No adjustment", {
expect_equal(grader(NULL, testDag1), 'correct')
})
test_that("User: Z | Solution: No adjustment", {
expect_equal(grader(c('Z'), testDag1), 'close')
})
testDag2 <- dagitty::as.dagitty(
"dag {
X [exposure]
Y [outcome]
Z
Z -> X
Z -> Y
}"
)
g <- dagitty::as.dagitty("dag{
g <- dagitty::as.dagitty("dag{
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
?grader
g <- dagitty::as.dagitty(
"dag {
X [exposure]
Y [outcome]
Z1 -> X
Z1 -> Y
X -> Z2
Z2 -> Y
X -> Y
}")
grader(c('Z1'), g, effect = 'total')
grader(c('Z1'), g, effect = 'direct')
grader(c('Z1', 'Z2'), g, effect = 'direct')
devtools::test()
devtools::check()
devtools::load_all()
?daggle
?daggle::untidy_dagitty()
library(dagitty)
library(ggdag)
dag <- dagitty( "dag {
Y <- X <- Z1 <- V -> Z2 -> Y
Z1 <- W1 <-> W2 -> Z2
X <- W1 -> Y
X <- W2 -> Y
X [exposure]
Y [outcome]
}")
dag
tidyDag <- ggdag::tidy_dagitty(dag)
ud <- untidy_dagitty(tidyDag)
plot(ud[["dagitty"]])
ggdag(ud[["ggdag"]])
ggdag(ud[["r"]])
names(ud)
ggdag(ud[["rString"]])
devtools::check()
randDAG(1, .3)
randDAG(4, .3)
## Tests ----
## Add one line by test you want to create
usethis::use_test("randDAG")
randDAG()
randDAG(5, 5)
randDAG(5, 1)
randDAG(5, 3)
randDAG(5, .3)
randDAG(as.integer(runif(2, 8)), .5)
randDAG(as.integer(runif(3, 8)), .5)
randDAG(as.integer(runif(1, 3, 8)), .5)
randDAG(as.integer(runif(1, 3, 8)), .5)
randDAG(as.integer(runif(1, 3, 8)), .5)
randDAG(as.integer(runif(1, 3, 8)), .5)
runif(1, 3, 8)
runif(1, 3, 8)
runif(1, 3, 8)
as.integer(runif(1, 3, 8))
as.integer(runif(1, 3, 8))
as.integer(runif(1, 3, 8))
as.integer(runif(100, 3, 8))
table(as.integer(runif(100, 3, 8)))
table(as.integer(runif(100, 3, 9)))
table(as.integer(runif(100, 3, 9)))
table(as.integer(runif(100, 3, 9)))
table(as.integer(runif(100, 3, 9)))
table(as.integer(runif(100, 3, 9)))
randDAG(as.integer(runif(100, 3, 9)), .5)
randDAG(N=as.integer(runif(100, 3, 9)), P=.5)
randDAG(n=as.integer(runif(100, 3, 9)), p=.5)
randDAG(4, .5)
randDAG(n=floor(runif(100, 3, 9)), p=.5)
randDAG(n=as.numeric(floor(runif(100, 3, 9))), p=.5)
randDAG(1, 4)
randDAG(4, 4)
randDAG(4, .4)
x <- randDAG(4, .4)
x$data
is.data.frame(x$data)
X <- randDAG(4, .4)
test_that("First element is a df", {
expect_equal(is.data.frame(X$data), TRUE)
})
dagitty::is.dagitty(X$dag)
test_that("First element is a df", {
expect_equal(is.data.frame(X$data), TRUE)
})
test_that("Second element is a dagitty", {
expect_equal(is.dagitty(X$dag), TRUE)
})
X <- randDAG(4, .4)
test_that("First element is a df", {
expect_equal(is.data.frame(X$data), TRUE)
})
test_that("Second element is a dagitty", {
expect_equal(is.dagitty(X$dag), TRUE)
})
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
devtools::test()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
devtools::test()
## Tests ----
## Add one line by test you want to create
usethis::use_test("untidy_dagitty")
}")
dag <- dagitty( "dag {
?dagitty
?untidy_dagitty
dag <- dagitty( "dag {
Y <- X <- Z1 <- V -> Z2 -> Y
Z1 <- W1 <-> W2 -> Z2
X <- W1 -> Y
X <- W2 -> Y
X [exposure]
Y [outcome]
}")
library(dagitty)
library(ggdag)
dag <- dagitty( "dag {
Y <- X <- Z1 <- V -> Z2 -> Y
Z1 <- W1 <-> W2 -> Z2
X <- W1 -> Y
X <- W2 -> Y
X [exposure]
Y [outcome]
}")
tidyDag <- ggdag::tidy_dagitty(dag)
ud <- untidy_dagitty(tidyDag)
plot(ud[["dagitty"]])
ggdag(ud[["rString"]])
ud
names(ud)
dag
dag <- dagitty( "dag {
X [pos= '0,0', exposure]
Y [pos= '0,2', outcome]
Z [pos= '1,1']
X <- Z -> Y
X -> Y
}")
dag <- dagitty( 'dag {
X [pos= "0,0", exposure]
Y [pos= "0,2", outcome]
Z [pos= "1,1"]
X <- Z -> Y
X -> Y
}')
dag
plot(dag)
names(dag)
expect_equal(names(ud), )
names(ud)
all.equal(names(ud), c("dagitty", "r", "rString"))
test_that("Correct names", {
expect_equal(names(ud), c("dagitty", "r", "rString"))
})
ud$dagitty
is.dagitty(ud$dagitty)
test_that("dagitty out put is dagitty", {
expect_equal(dagitty::is.dagitty(ud$dagitty), TRUE)
})
is.dagitty(ud$r)
is.dagitty(ud$rString)
ud$dagitty
tidyDag <- ggdag::tidy_dagitty(dag)
ud <- untidy_dagitty(tidyDag)
test_that("Correct names", {
expect_equal(names(ud), c("dagitty", "r", "rString"))
})
test_that("dagitty output is dagitty", {
expect_equal(dagitty::is.dagitty(ud$dagitty), TRUE)
})
test_that("rString output is dagitty", {
expect_equal(dagitty::is.dagitty(ud$rString), TRUE)
})
ud
ud$dagitty
test_that("rString output is dagitty", {
expect_equal(ud$dagitty, testText1)
})
testText1 <- 'dag {
X [exposure,pos="0.000,0.000"]
Y [outcome,pos="0.000,2.000"]
Z [pos="1,-1"] [pos="1.000,1.000"]
X -> Y
Z -> X
Z -> Y
}'
test_that("rString output is dagitty", {
expect_equal(ud$dagitty, testText1)
})
expect_equal(ud$dagitty, dag)
testText1 <- dagitty::dagitty('dag {
X [exposure,pos="0.000,0.000"]
Y [outcome,pos="0.000,2.000"]
Z [pos="1,-1"] [pos="1.000,1.000"]
X -> Y
Z -> X
Z -> Y
}')
testText1 <- dagitty::as.dagitty('dag {
X [exposure,pos="0.000,0.000"]
Y [outcome,pos="0.000,2.000"]
Z [pos="1,-1"] [pos="1.000,1.000"]
X -> Y
Z -> X
Z -> Y
}')
untidy_dagitty()
ud$dagitty
ud$r
ud$rString
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
dag$ud
ud$dagitty
ud$rString
ud$r
dag
is.tidy_dagitty(dag)
ggdag::is.tidy_dagitty(dag)
ggdag::tidy_dagitty(dag)
ggdag::tidy_dagitty(dag)[1]
ggdag::tidy_dagitty(dag)[2]
untidy_dagitty(ggdag::tidy_dagitty(dag))
library(ggdag)
tidy_dagitty()
?tidy_dagitty()
tidy <- ggdag::tidy_dagitty(
dagitty::dagitty( 'dag {
X [pos= "0,0", exposure]
Y [pos= "0,2", outcome]
Z [pos= "1,1"]
X <- Z -> Y
X -> Y
}'))
tidy
tidy
untidy <- untidy_dagitty(tidy)
test_that("Correct names", {
expect_equal(names(ud), c("dagitty", "r", "rString"))
})
library(testthat)
test_that("Correct names", {
expect_equal(names(ud), c("dagitty", "r", "rString"))
})
test_that("dagitty output is dagitty", {
expect_equal(dagitty::is.dagitty(ud$dagitty), TRUE)
})
test_that("rString output is dagitty", {
expect_equal(dagitty::is.dagitty(ud$rString), TRUE)
})
testText1 <- dagitty::dagitty('dag {
X [exposure,pos="0.000,0.000"]
Y [outcome,pos="0.000,2.000"]
Z [pos="1,-1"] [pos="1.000,1.000"]
X -> Y
Z -> X
Z -> Y
}')
untidy
tidy <- ggdag::tidy_dagitty(
dagitty::dagitty( 'dag {
X [exposure]
Y [outcome]
Z
X <- Z -> Y
X -> Y
}'))
tidy
untidy <- untidy_dagitty(tidy)
test_that("Correct names", {
expect_equal(names(ud), c("dagitty", "r", "rString"))
})
test_that("dagitty output is dagitty", {
expect_equal(dagitty::is.dagitty(ud$dagitty), TRUE)
})
test_that("rString output is dagitty", {
expect_equal(dagitty::is.dagitty(ud$rString), TRUE)
})
tidy$dag$x
tidy$data
tidy$data$xend[1]
untidy$dagitty
devtools::test()
devtools::test()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::test()
load_all
devtools::load_all
devtools::load_all()
devtools::check()
tidy <- ggdag::tidy_dagitty(
dagitty::dagitty( 'dag {
X [exposure]
Y [outcome]
Z
X <- Z -> Y
X -> Y
}'))
untidy <- untidy_dagitty(tidy)
devtools::test()
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
devtools::check()
# Set options here
options(golem.app.prod = TRUE, repos = BiocManager::repositories(), shiny.autoload.r=FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
runApp()
devtools::check()
# Set options here
options(golem.app.prod = TRUE, repos = BiocManager::repositories(), shiny.autoload.r=FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
update.packages("V8")
install.packages("V8")
install.packages("V8")
# Set options here
options(golem.app.prod = TRUE, repos = BiocManager::repositories(), shiny.autoload.r=FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
check()
devtools::check()
# Set options here
options(golem.app.prod = TRUE, repos = BiocManager::repositories(), shiny.autoload.r=FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort(), shiny.launch.browser=TRUE)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
